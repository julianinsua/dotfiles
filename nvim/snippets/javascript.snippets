# COMPONENTS
snippet rscpt "React stateless component w/ Prop Types" b
import * as PropTypes from 'prop-types'

const ${1:`!v expand('%:t:r')`} = ({}) => {
	return null$0
}

${1:`!v expand('%:t:r')`}.propTypes = {
	
}

${1:`!v expand('%:t:r')`}.defaultProps = {
	
}

export default $1
endsnippet

snippet rsc "React stateless component" b
const ${1:`!v expand('%:t:r')`} = ({}) => {
	return null$0
}

export default $1
endsnippet

snippet ind "Automatic index.js" b
export { default } from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}'
endsnippet

# HOOKS
snippet useS "useState()" b
const [$1, set`!p snip.rv=upperfirst(t[1])`] = useState($2)
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [])
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => {
	$0
}, [])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => {
	$0
}, [])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

# REDUX
snippet useD "useDispatch" b
const dispatch = useDispatch()
endsnippet

snippet useSe "useSelector(selector)" b
const ${1:value} = useSelector(${2:state => $3})
endsnippet

# PROP TYPES
snippet pta "PropTypes.array" w
PropTypes.array
endsnippet

snippet ptar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet ptb "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet ptbr "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet ptf "PropTypes.func" w
PropTypes.func
endsnippet

snippet ptfr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet ptnu "PropTypes.number" w
PropTypes.number
endsnippet

snippet ptnur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pto "PropTypes.object" w
PropTypes.object
endsnippet

snippet ptor "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pts "PropTyes.string" w
PropTypes.string
endsnippet

snippet ptsr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet ptno "PropTypes.node" w
PropTypes.node
endsnippet

snippet ptnor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pte "PropTypes.element" w
PropTypes.element
endsnippet

snippet pter "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet ptao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet ptaor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptio "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet ptior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptoo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet ptoor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptone "PropTypes.oneOf([])" w
PropTypes.oneOf(['$1'$2])
endsnippet

snippet ptoner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(['$1'$2]).isRequired
endsnippet

snippet ptonet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet ptonetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet ptsh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet ptshr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet
